/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package store;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JTable;

/**
 *
 * @author nUll
 */
public class SupplierView extends BaseView implements IAction {

    private UserModel user = null;
    private JTable table;
    private SupplierTableModel model;

    /**
     * Creates new form SupplierDialog
     */
    public SupplierView(UserModel user) throws Exception {
        super(user);
        initComponents();
        updateInterfaceSelf();
        this.user = user;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Supplier");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 573, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SupplierView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SupplierView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SupplierView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SupplierView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {

                    SupplierView dialog = new SupplierView(null);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void jButtonInsertAction(ActionEvent evt) {
        try {
            ArrayList<SupplierModel> supplierList = null;
            SupplierNew suplierNew = new SupplierNew(this, rootPaneCheckingEnabled, user);
            suplierNew.setVisible(true);

            if (suplierNew.isClosed()) {
                updateInterfaceSelf();

            }
        } catch (Exception ex) {
            Logger.getLogger(SupplierView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void jButtonUpdateAction(ActionEvent evt) {
        try {
            int index = table.getSelectedRow();
            SupplierModel supplier = model.getRow(index);

            SupplierUpdate supplierUpdate = new SupplierUpdate(this, rootPaneCheckingEnabled, user, supplier);
            supplierUpdate.setVisible(true);

            if (supplierUpdate.isClosed()) {
                SupplierController.setUpdate(Operation.UPDATE, supplier);
                updateInterfaceSelf();

            }
        } catch (Exception ex) {
            Logger.getLogger(SupplierView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void jButtonDeleteAction(ActionEvent evt) {
        int[] rows = table.getSelectedRows();
        for (int index : rows) {
            SupplierModel supplier = model.getRow(index);
            SupplierController.setUpdate(Operation.DELETE, supplier);

        }
        updateInterfaceSelf();
    }

    @Override
    public void aInsertText() {
        aChangedText();
    }

    @Override
    public void aRemovedText() {
        aChangedText();
    }

    @Override
    public void aChangedText() {
        String pattern = getTextSearch().getText();
        ArrayList<SupplierModel> suppliers = SupplierController.getAllSupplierByLike(pattern);
        refershTable(suppliers);
    }

    private void updateInterfaceSelf() {

        table = getTable();
        ArrayList<SupplierModel> supplier = SupplierController.getAllSupplier();
        refershTable(supplier);

    }

    private void refershTable(ArrayList<SupplierModel> suppliers) {
        model = new SupplierTableModel(suppliers);
        table.setModel(model);
        if (table.isEditing()) {
            table.revalidate();
        }
    }

}
