/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package store;

import java.awt.event.ActionEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;

/**
 *
 * @author nUll
 */
public class CatogeryView extends BaseView implements IAction {

    private JTable table;
    UserModel user;
    private CatogeryTableModel model;

    /**
     * Creates new form CatogryFrame
     */
    public CatogeryView(UserModel user) throws Exception {
        super(user);
        initComponents();
        updateInterfaceSelf();
        this.user = user;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CatogeryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CatogeryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CatogeryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CatogeryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new CatogeryView(null).setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(CatogeryView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void jButtonInsertAction(ActionEvent e) {
        try {
            CatogeryNew catogeryNew = new CatogeryNew(this, rootPaneCheckingEnabled, user);
            catogeryNew.setVisible(true);
            if (catogeryNew.isClosed()) {
                CatogeryModel cat = catogeryNew.getCat();
                CatogeryController.setUpdate(cat, Operation.INSERT);
                updateInterfaceSelf();

            }
        } catch (Exception ex) {
            Logger.getLogger(CatogeryView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void jButtonUpdateAction(ActionEvent e) {
        try {
            int row = table.getSelectedRow();
            CatogeryModel cat = model.getRow(row);
            CatogeryUpdate catogeryUpdate = new CatogeryUpdate(this, rootPaneCheckingEnabled, user, cat);
            catogeryUpdate.setVisible(true);
            if (catogeryUpdate.isClosed()) {
                CatogeryController.setUpdate(cat, Operation.UPDATE);
                updateInterfaceSelf();

            }
        } catch (Exception ex) {
            Logger.getLogger(CatogeryView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void jButtonDeleteAction(ActionEvent e) {
        int[] row = table.getSelectedRows();
        for (int index : row) {
            try {
                CatogeryModel cat = model.getRow(index);
                CatogeryController.setUpdate(cat, Operation.DELETE);
            } catch (SQLException ex) {
                Logger.getLogger(CatogeryView.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        updateInterfaceSelf();

    }

    private void updateInterfaceSelf() {

        ArrayList<CatogeryModel> cats = CatogeryController.getAllCat();
        table = getTable();
        refreshTable(cats);
    }

    private void refreshTable(ArrayList<CatogeryModel> cats) {
        model = new CatogeryTableModel(cats);
        table.setModel(model);
        if (table.isEditing()) {
            table.revalidate();
        }

    }

    @Override
    public void aInsertText() {
        aChangedText();
    }

    @Override
    public void aRemovedText() {
        aChangedText();
    }

    @Override
    public void aChangedText() {

        String pattern = getTextSearch().getText();
        ArrayList<CatogeryModel> cats = CatogeryController.getAllCat(Operation.SEARCH, pattern);

        refreshTable(cats);
    }

}
